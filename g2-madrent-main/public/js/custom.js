/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/custom.js":
/*!********************************!*\
  !*** ./resources/js/custom.js ***!
  \********************************/
/***/ (() => {

eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n$(document).ready(function () {\n  $(\"#categorySearchBtn\").click(function () {\n    console.log(\"handle search.\");\n  });\n\n  var checkboxes = _toConsumableArray(document.querySelectorAll('.form-check-input'));\n\n  var brandListHolder = document.getElementById('brandList');\n  checkboxes.forEach(function (item) {\n    item.addEventListener('click', function (e) {\n      e.stopImmediatePropagation();\n\n      if (!item.checked) {\n        var list = brandListHolder.value.split(',');\n        list = list.filter(function (it) {\n          return it != item.getAttribute(\"value\");\n        });\n        brandListHolder.value = list;\n        console.log(\"Removing from hidden list holder.\");\n      } else {\n        console.log(\"Adding to hidden list holder.\");\n\n        if (brandListHolder.value.length > 0) {\n          brandListHolder.value += ',' + item.getAttribute(\"value\");\n        } else {\n          brandListHolder.value += item.getAttribute(\"value\");\n        }\n      }\n    });\n  });\n\n  var closers = _toConsumableArray(document.querySelectorAll('.prevPicCloser'));\n\n  picList = document.getElementById('picList');\n  picDelList = document.getElementById('picDelList');\n  closers.forEach(function (item, i) {\n    item.addEventListener('click', function (e) {\n      e.preventDefault();\n      console.log(item.getAttribute(\"data-picture\"));\n      removeFromPicList(item.getAttribute(\"data-picture\"));\n      item.parentElement.style.display = \"none\";\n      picDelList.value += ',' + item.getAttribute(\"data-picture\");\n    });\n  });\n\n  function removeFromPicList(imagePath) {\n    var curList = picList.value.split(\",\");\n    curList = curList.filter(function (e) {\n      return e !== imagePath;\n    });\n    picList.value = curList;\n  } // $.ajaxSetup({\n  //    headers: {\n  //        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n  //    }\n  // });\n  //console.log($('meta[name=\"csrf-token\"]').attr('content'));\n\n\n  window.openEditWindow = function openEditWindow() {\n    document.getElementById(\"adminPopup\").classList.toggle('hidden');\n  };\n\n  window.closePopup = function closePopup() {\n    document.getElementById(\"adminPopup\").classList.toggle('hidden');\n    console.log(document.getElementById(\"adminPopup\").style.display);\n  };\n\n  window.searchIn = function searchIn() {\n    console.log(\"HERE\");\n  };\n\n  window.editRecordPopup = function deleteRecordPopup() {\n    console.log(\"HERE2\");\n  };\n\n  window.deleteRecordPopup = function deleteRecordPopup(id, table) {// var token = $('meta[name=\"csrf-token\"]').attr('content');\n    // $.ajax({\n    //    type: 'POST',\n    //    url:\"/adminPanel/deleteCategory\",\n    //    dataType: 'json',\n    //    cache: false,\n    //    beforeSend: function(xhr){xhr.setRequestHeader('X-CSRF-TOKEN', $(\"#token\").attr('content'));},\n    //    data:{\n    //       _token: token, \n    //       recordId:id\n    //    },\n    //    success:function(data){\n    //       alert(data.success);\n    //    },\n    //    error: function(error) {\n    //       console.log(error);\n    //    }\n    // });\n  };\n\n  window.showPhone = function (elem) {\n    console.log(\"HGI\");\n    var holder = document.getElementById(\"phoneData\"); //console.log(holder.childNodes);\n\n    var input = holder.childNodes[1];\n    var display = holder.childNodes[3]; //console.log(input)\n    //console.log(display)\n\n    input.classList.remove(\"hidden\");\n    display.classList.add(\"hidden\");\n    elem.parentNode.childNodes[3].classList.remove(\"hidden\");\n    elem.classList.add(\"hidden\");\n  };\n\n  window.showEmail = function (elem) {\n    var holder = document.getElementById(\"emailData\");\n    var input = holder.childNodes[1];\n    var display = holder.childNodes[3];\n    input.classList.remove(\"hidden\");\n    display.classList.add(\"hidden\");\n    elem.parentNode.childNodes[3].classList.remove(\"hidden\");\n    elem.classList.add(\"hidden\");\n  };\n\n  window.showPassword = function (elem) {\n    var holder = document.getElementById(\"passwordData\");\n    var input = holder.childNodes[1];\n    var display = holder.childNodes[3];\n    input.classList.remove(\"hidden\");\n    display.classList.add(\"hidden\");\n    elem.parentNode.childNodes[3].classList.remove(\"hidden\");\n    elem.classList.add(\"hidden\");\n  };\n});\n\nwindow.saveData = function saveData(formName) {//let form = document.getElementById(formName+\"Data\");\n  //TODO do settings\n}; //basic idea FROM https://codepen.io/ChrisSargent/pen/meMMye with modifications\n\n\nif ((window.location.href.indexOf(\"/products\") > -1 || window.location.href.indexOf(\"/category\") > -1) && window.location.href.indexOf('/adminPanel') < 0) {\n  var lowerTextField = document.querySelector(\"#lowerMoneyBound\"),\n      upperTextField = document.querySelector(\"#upperMoneyBound\");\n  var lowerSlider = document.querySelector('#lowerMoneyFilterRange'),\n      upperSlider = document.querySelector('#upperMoneyFilterRange'),\n      lowerVal = parseInt(lowerSlider.value);\n  upperVal = parseInt(upperSlider.value);\n\n  upperSlider.oninput = function () {\n    lowerVal = parseInt(lowerSlider.value);\n    upperVal = parseInt(upperSlider.value);\n\n    if (upperVal < lowerVal + 4) {\n      lowerSlider.value = upperVal - 4;\n\n      if (lowerVal == lowerSlider.min) {\n        upperSlider.value = 4;\n      }\n    }\n\n    lowerTextField.value = lowerVal;\n    upperTextField.value = upperVal;\n  };\n\n  lowerSlider.oninput = function () {\n    lowerVal = parseInt(lowerSlider.value);\n    upperVal = parseInt(upperSlider.value);\n\n    if (lowerVal > upperVal - 4) {\n      upperSlider.value = lowerVal + 4;\n\n      if (upperVal == upperSlider.max) {\n        lowerSlider.value = parseInt(upperSlider.max) - 4;\n      }\n    }\n\n    lowerTextField.value = lowerVal;\n    upperTextField.value = upperVal;\n  };\n\n  lowerTextField.oninput = function () {\n    lowerSlider.value = parseInt(lowerTextField.value);\n  };\n\n  upperTextField.oninput = function () {\n    upperSlider.value = parseInt(upperTextField.value);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/custom.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/custom.js"]();
/******/ 	
/******/ })()
;